/**
 * @fileoverview gRPC-Web generated client stub for szdiagnostic
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szdiagnostic.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as szdiagnostic_pb from './szdiagnostic_web_pb'; // proto import: "szdiagnostic.proto"


export class SzDiagnosticClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCheckDatastorePerformance = new grpcWeb.MethodDescriptor(
    '/szdiagnostic.SzDiagnostic/CheckDatastorePerformance',
    grpcWeb.MethodType.UNARY,
    szdiagnostic_pb.CheckDatastorePerformanceRequest,
    szdiagnostic_pb.CheckDatastorePerformanceResponse,
    (request: szdiagnostic_pb.CheckDatastorePerformanceRequest) => {
      return request.serializeBinary();
    },
    szdiagnostic_pb.CheckDatastorePerformanceResponse.deserializeBinary
  );

  checkDatastorePerformance(
    request: szdiagnostic_pb.CheckDatastorePerformanceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szdiagnostic_pb.CheckDatastorePerformanceResponse>;

  checkDatastorePerformance(
    request: szdiagnostic_pb.CheckDatastorePerformanceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.CheckDatastorePerformanceResponse) => void): grpcWeb.ClientReadableStream<szdiagnostic_pb.CheckDatastorePerformanceResponse>;

  checkDatastorePerformance(
    request: szdiagnostic_pb.CheckDatastorePerformanceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.CheckDatastorePerformanceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szdiagnostic.SzDiagnostic/CheckDatastorePerformance',
        request,
        metadata || {},
        this.methodDescriptorCheckDatastorePerformance,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szdiagnostic.SzDiagnostic/CheckDatastorePerformance',
    request,
    metadata || {},
    this.methodDescriptorCheckDatastorePerformance);
  }

  methodDescriptorGetDatastoreInfo = new grpcWeb.MethodDescriptor(
    '/szdiagnostic.SzDiagnostic/GetDatastoreInfo',
    grpcWeb.MethodType.UNARY,
    szdiagnostic_pb.GetDatastoreInfoRequest,
    szdiagnostic_pb.GetDatastoreInfoResponse,
    (request: szdiagnostic_pb.GetDatastoreInfoRequest) => {
      return request.serializeBinary();
    },
    szdiagnostic_pb.GetDatastoreInfoResponse.deserializeBinary
  );

  getDatastoreInfo(
    request: szdiagnostic_pb.GetDatastoreInfoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szdiagnostic_pb.GetDatastoreInfoResponse>;

  getDatastoreInfo(
    request: szdiagnostic_pb.GetDatastoreInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.GetDatastoreInfoResponse) => void): grpcWeb.ClientReadableStream<szdiagnostic_pb.GetDatastoreInfoResponse>;

  getDatastoreInfo(
    request: szdiagnostic_pb.GetDatastoreInfoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.GetDatastoreInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szdiagnostic.SzDiagnostic/GetDatastoreInfo',
        request,
        metadata || {},
        this.methodDescriptorGetDatastoreInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szdiagnostic.SzDiagnostic/GetDatastoreInfo',
    request,
    metadata || {},
    this.methodDescriptorGetDatastoreInfo);
  }

  methodDescriptorGetFeature = new grpcWeb.MethodDescriptor(
    '/szdiagnostic.SzDiagnostic/GetFeature',
    grpcWeb.MethodType.UNARY,
    szdiagnostic_pb.GetFeatureRequest,
    szdiagnostic_pb.GetFeatureResponse,
    (request: szdiagnostic_pb.GetFeatureRequest) => {
      return request.serializeBinary();
    },
    szdiagnostic_pb.GetFeatureResponse.deserializeBinary
  );

  getFeature(
    request: szdiagnostic_pb.GetFeatureRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szdiagnostic_pb.GetFeatureResponse>;

  getFeature(
    request: szdiagnostic_pb.GetFeatureRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.GetFeatureResponse) => void): grpcWeb.ClientReadableStream<szdiagnostic_pb.GetFeatureResponse>;

  getFeature(
    request: szdiagnostic_pb.GetFeatureRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.GetFeatureResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szdiagnostic.SzDiagnostic/GetFeature',
        request,
        metadata || {},
        this.methodDescriptorGetFeature,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szdiagnostic.SzDiagnostic/GetFeature',
    request,
    metadata || {},
    this.methodDescriptorGetFeature);
  }

  methodDescriptorPurgeRepository = new grpcWeb.MethodDescriptor(
    '/szdiagnostic.SzDiagnostic/PurgeRepository',
    grpcWeb.MethodType.UNARY,
    szdiagnostic_pb.PurgeRepositoryRequest,
    szdiagnostic_pb.PurgeRepositoryResponse,
    (request: szdiagnostic_pb.PurgeRepositoryRequest) => {
      return request.serializeBinary();
    },
    szdiagnostic_pb.PurgeRepositoryResponse.deserializeBinary
  );

  purgeRepository(
    request: szdiagnostic_pb.PurgeRepositoryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szdiagnostic_pb.PurgeRepositoryResponse>;

  purgeRepository(
    request: szdiagnostic_pb.PurgeRepositoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.PurgeRepositoryResponse) => void): grpcWeb.ClientReadableStream<szdiagnostic_pb.PurgeRepositoryResponse>;

  purgeRepository(
    request: szdiagnostic_pb.PurgeRepositoryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.PurgeRepositoryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szdiagnostic.SzDiagnostic/PurgeRepository',
        request,
        metadata || {},
        this.methodDescriptorPurgeRepository,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szdiagnostic.SzDiagnostic/PurgeRepository',
    request,
    metadata || {},
    this.methodDescriptorPurgeRepository);
  }

  methodDescriptorReinitialize = new grpcWeb.MethodDescriptor(
    '/szdiagnostic.SzDiagnostic/Reinitialize',
    grpcWeb.MethodType.UNARY,
    szdiagnostic_pb.ReinitializeRequest,
    szdiagnostic_pb.ReinitializeResponse,
    (request: szdiagnostic_pb.ReinitializeRequest) => {
      return request.serializeBinary();
    },
    szdiagnostic_pb.ReinitializeResponse.deserializeBinary
  );

  reinitialize(
    request: szdiagnostic_pb.ReinitializeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szdiagnostic_pb.ReinitializeResponse>;

  reinitialize(
    request: szdiagnostic_pb.ReinitializeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.ReinitializeResponse) => void): grpcWeb.ClientReadableStream<szdiagnostic_pb.ReinitializeResponse>;

  reinitialize(
    request: szdiagnostic_pb.ReinitializeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szdiagnostic_pb.ReinitializeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szdiagnostic.SzDiagnostic/Reinitialize',
        request,
        metadata || {},
        this.methodDescriptorReinitialize,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szdiagnostic.SzDiagnostic/Reinitialize',
    request,
    metadata || {},
    this.methodDescriptorReinitialize);
  }

}

