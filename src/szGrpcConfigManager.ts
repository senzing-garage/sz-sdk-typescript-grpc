import * as grpc from '@grpc/grpc-js';
import { AddConfigRequest, AddConfigResponse, GetConfigRequest, GetConfigResponse, GetConfigsRequest, GetDefaultConfigIdRequest, GetDefaultConfigIdResponse, ReplaceDefaultConfigIdRequest, ReplaceDefaultConfigIdResponse, SetDefaultConfigIdRequest, SetDefaultConfigIdResponse} from './szconfigmanager/szconfigmanager_pb';
import { SzConfigManagerClient } from './szconfigmanager/szconfigmanager_grpc_pb';
import { SzConfigManager } from './abstracts/szConfigManager';
import { newException } from './szHelpers';
import { SzError, SzNoGrpcConnectionError } from './senzing/SzError';
import { DEFAULT_CHANNEL_OPTIONS, DEFAULT_CONNECTION_READY_TIMEOUT, DEFAULT_CONNECTION_STRING, DEFAULT_CREDENTIALS, SzGrpcEnvironmentOptions } from './szGrpcEnvironment';
import { SzGrpcBase } from './abstracts/szGrpcBase';

// strong typed version of the default abstract options specific to this implementation 
// prevents accidentally passing the wrong type of client to constructor
/** options to initialize SzConfigManager class */
export interface SzGrpcConfigManagerOptions extends SzGrpcEnvironmentOptions { 
    client?: SzConfigManagerClient
}

/**
 * SzGrpcConfigManager
 * Access the Senzing ConfigManager module via gRPC
 * 
 * @name SzGrpcConfigManager
 * @class
 */
export class SzGrpcConfigManager extends SzGrpcBase implements SzConfigManager {
    private _client;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    public productId = "5051";

    /** 
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @internal
     */
    public set client(value: SzConfigManagerClient) {
        this._client = value;
    }
    /** 
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @internal
     */
    public get client(): SzConfigManagerClient {
        return this._client;
    }

    /**
     * Adds a Senzing configuration JSON document to the Senzing database.
     * @param configDefinition The Senzing configuration JSON document.
     * @returns {Promise<number>} A configuration identifier.
     */
    addConfig(configDefinition: string): Promise<number> {
        return new Promise<number>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new AddConfigRequest();
                this.client.addConfig(request, (err, res: AddConfigResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return
                    }
                    //console.log("RESPONSE:\n\r", result);
                    resolve( res.getResult() );
                });
            });
        });
    }
    /**
     * Retrieves a specific Senzing configuration JSON document from the Senzing database.
     * @param configId The configuration identifier of the desired Senzing Engine configuration JSON document to retrieve.
     * @returns {Promise<string>} JSON document containing the Senzing configuration.
     */
    getConfig(configId: number): Promise<string> {
        return new Promise<string>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new GetConfigRequest();
                request.setConfigid(configId);
                this.client.getConfig(request, (err, res: GetConfigResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return
                    }
                    //console.log("RESPONSE:\n\r", result);
                    resolve( res.getResult() );
                });
            });
        });
    }
    /**
     * Retrieves a list of Senzing configurations from the Senzing database.
     * @returns {Promise<string>} JSON document containing Senzing configurations.
     */
    getConfigs(): Promise<string> {
        return new Promise<string>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new GetConfigsRequest();
                this.client.getConfigs(request, (err, res: GetConfigResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    //console.log("RESPONSE:\n\r", result);
                    resolve(res.getResult());
                });
                return undefined;
            });
        });
    }
    /**
     * Retrieves from the Senzing database the configuration identifier of the default Senzing configuration.
     * @returns {Promise<number>} identifier which identifies the current configuration in use.
     */
    getDefaultConfigId(): Promise<number> {
        return new Promise<number>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new GetDefaultConfigIdRequest();
                this.client.getDefaultConfigId(request, (err, res: GetDefaultConfigIdResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return
                    }
                    //console.log("RESPONSE:\n\r", result);
                    resolve( res.getResult() );
                });
            });

            return -1;
        });
    }
    /**
     * Replaces and sets a new configuration identifier in the Senzing database. 
     * To serialize modifying of the configuration identifier, 
     * 
     * @see replaceDefaultConfigId
     * @param configId The configuration identifier of the Senzing Engine configuration to use as the default.
     * @returns {Promise<undefined>} for async flow control
     */
    setDefaultConfigId(configId: number): Promise<undefined | SzError> | undefined {
        return new Promise<undefined>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new SetDefaultConfigIdRequest();
                request.setConfigid(configId);
                this.client.setDefaultConfigId(request, (err, res: SetDefaultConfigIdResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return;
                    }
                });
            });
        });
    }

    constructor(parameters: SzGrpcConfigManagerOptions) {
        const { connectionString, credentials, client, grpcOptions, grpcConnectionReadyTimeOut } = parameters;
        super(parameters);
        if(client) {
            // if client was passed in use/reuse that
            this._client            = client;
        } else if(connectionString) {
            // otherwise create client from options passed in
            this._client             = new SzConfigManagerClient(
                connectionString ? connectionString : DEFAULT_CONNECTION_STRING, 
                credentials ? credentials : DEFAULT_CREDENTIALS,
                grpcOptions ? grpcOptions : DEFAULT_CHANNEL_OPTIONS
            );
        } else {
            // no client or connection params, throw
            throw new Error(`not enough parameters to initialize`);
        }
    }
    /**
     * Replaces the old configuration identifier with a new configuration identifier 
     * in the Senzing database. It is like a “compare-and-swap” instruction to serialize 
     * concurrent editing of configuration. If {@param currentDefaultConfigId} is no longer 
     * the “current configuration identifier”, the operation will fail. To simply set 
     * the default configuration ID, use {@link setSefaultConfigId}.
     * 
     * @param currentDefaultConfigId The configuration identifier to replace.
     * @param newDefaultConfigId  The configuration identifier to use as the default.
     * @returns {Promise<undefined>} for async flow control
     */
    replaceDefaultConfigId(currentDefaultConfigId: number, newDefaultConfigId: number) {
        return new Promise<string>((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.client.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new ReplaceDefaultConfigIdRequest();
                request.setCurrentdefaultconfigid(currentDefaultConfigId);
                request.setNewdefaultconfigid(newDefaultConfigId);
                this.client.replaceDefaultConfigId(request, (err, res: ReplaceDefaultConfigIdResponse) => {
                    if(err) {
                        let _err = newException(err.details);
                        reject(_err);
                        throw _err;
                        return
                    }
                });
            });
        });
    }
}