/**
 * @fileoverview gRPC-Web generated client stub for szproduct
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szproduct.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as szproduct_pb from './szproduct_pb'; // proto import: "szproduct.proto"


export class SzProductClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetLicense = new grpcWeb.MethodDescriptor(
    '/szproduct.SzProduct/GetLicense',
    grpcWeb.MethodType.UNARY,
    szproduct_pb.GetLicenseRequest,
    szproduct_pb.GetLicenseResponse,
    (request: szproduct_pb.GetLicenseRequest) => {
      return request.serializeBinary();
    },
    szproduct_pb.GetLicenseResponse.deserializeBinary
  );

  getLicense(
    request: szproduct_pb.GetLicenseRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szproduct_pb.GetLicenseResponse>;

  getLicense(
    request: szproduct_pb.GetLicenseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szproduct_pb.GetLicenseResponse) => void): grpcWeb.ClientReadableStream<szproduct_pb.GetLicenseResponse>;

  getLicense(
    request: szproduct_pb.GetLicenseRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szproduct_pb.GetLicenseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szproduct.SzProduct/GetLicense',
        request,
        metadata || {},
        this.methodDescriptorGetLicense,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szproduct.SzProduct/GetLicense',
    request,
    metadata || {},
    this.methodDescriptorGetLicense);
  }

  methodDescriptorGetVersion = new grpcWeb.MethodDescriptor(
    '/szproduct.SzProduct/GetVersion',
    grpcWeb.MethodType.UNARY,
    szproduct_pb.GetVersionRequest,
    szproduct_pb.GetVersionResponse,
    (request: szproduct_pb.GetVersionRequest) => {
      return request.serializeBinary();
    },
    szproduct_pb.GetVersionResponse.deserializeBinary
  );

  getVersion(
    request: szproduct_pb.GetVersionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szproduct_pb.GetVersionResponse>;

  getVersion(
    request: szproduct_pb.GetVersionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szproduct_pb.GetVersionResponse) => void): grpcWeb.ClientReadableStream<szproduct_pb.GetVersionResponse>;

  getVersion(
    request: szproduct_pb.GetVersionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szproduct_pb.GetVersionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szproduct.SzProduct/GetVersion',
        request,
        metadata || {},
        this.methodDescriptorGetVersion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szproduct.SzProduct/GetVersion',
    request,
    metadata || {},
    this.methodDescriptorGetVersion);
  }

}

