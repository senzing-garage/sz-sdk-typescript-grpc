import * as grpc from '@grpc/grpc-js';
import { CheckRepositoryPerformanceRequest, CheckRepositoryPerformanceResponse, GetRepositoryInfoRequest, GetRepositoryInfoResponse, GetFeatureRequest, GetFeatureResponse, PurgeRepositoryRequest, PurgeRepositoryResponse, ReinitializeRequest, ReinitializeResponse } from './szdiagnostic/szdiagnostic_web_pb';
import { SzDiagnosticClient } from './szdiagnostic/szdiagnostic_web_client';
import { SzDiagnostic } from './abstracts/szDiagnostic';
import { newException } from './szHelpers';
import { SzError, SzNoGrpcConnectionError } from './senzing/SzError';
import { CHECK_DATASTORE_PERFORMANCE_RESPONSE } from './types/szDiagnostic';
import { DEFAULT_CHANNEL_OPTIONS, DEFAULT_CONNECTION_READY_TIMEOUT, DEFAULT_CONNECTION_STRING, DEFAULT_CREDENTIALS, SzGrpcWebEnvironmentOptions } from './szGrpcWebEnvironment';
import { SzGrpcWebBase } from './abstracts/szGrpcWebBase';

export interface SzGrpcWebDiagnosticOptions extends SzGrpcWebEnvironmentOptions { 
    client?: SzDiagnosticClient
}

/**
 * SzGrpcDiagnostic
 * Access the Senzing Diagnostic module via gRPC
 *
 * @group SzGrpcClasses
 * @hideconstructor
 * @class
 */
export class SzGrpcWebDiagnostic extends SzGrpcWebBase implements SzDiagnostic {
    /** @ignore */
    private _client: SzDiagnosticClient;
    /** See {@link https://github.com/senzing-garage/knowledge-base/blob/main/lists/senzing-component-ids.md} */
    public productId = "5052";
    
    /** 
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    public set client(value: SzDiagnosticClient) {
        this._client = value;
    }
    /** 
     * the client is the grpc client class generated by protoc.
     * Not intended for end-user use. We need these in case we have to re-connect or destroy from {@link: module:SzGrpcEnvironment} but shouldn't be in the docs.
     * @ignore
     */
    public get client(): SzDiagnosticClient {
        return this._client;
    }

    constructor(parameters: SzGrpcWebDiagnosticOptions) {
        const { connectionString, credentials, client, grpcOptions, grpcConnectionReadyTimeOut } = parameters;
        super(parameters);

        if(client) {
            // if client was passed in use/reuse that
            this._client            = client;
        } else if(connectionString) {
            // otherwise create client from options passed in
            this._client             = new SzDiagnosticClient(
                connectionString ? connectionString : DEFAULT_CONNECTION_STRING, 
                credentials ? credentials : DEFAULT_CREDENTIALS,
                grpcOptions ? grpcOptions : DEFAULT_CHANNEL_OPTIONS
            );
        } else {
            // no client or connection params, throw
            throw new Error(`not enough parameters to initialize`);
        }
    }
    /**
     * Performs inserts to determine rate of insertion.
     * @param secondsToRun Duration of the test in seconds.
     * @returns {Promise<CHECK_DATASTORE_PERFORMANCE_RESPONSE>} A JSON document
     */
    checkRepositoryPerformance(secondsToRun: number): Promise<CHECK_DATASTORE_PERFORMANCE_RESPONSE | SzError> {
        return new Promise((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new CheckRepositoryPerformanceRequest();
                request.setSecondsToRun(secondsToRun);
                this.client.checkRepositoryPerformance(request, this._metadata, (err, res: CheckRepositoryPerformanceResponse) => {
                    if(err) {
                        let _err = newException(err);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    let result = JSON.parse(res.getResult()) as CHECK_DATASTORE_PERFORMANCE_RESPONSE;
                    //console.log("RESPONSE:\n\r", result, res.getResult().toString());
                    resolve(result);
                });
            });
        });
    }
    /**
     * Returns details of the datastore currently in use by Senzing.
     * @returns {Promise<string>}
     */
    getRepositoryInfo(): Promise<string> {
        return new Promise((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new GetRepositoryInfoRequest();
                this.client.getRepositoryInfo(request, this._metadata, (err, res: GetRepositoryInfoResponse) => {
                    if(err) {
                        let _err = newException(err);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    let result = res.getResult();
                    //console.log("RESPONSE:\n\r", result);
                    resolve(result);
                });
            });
        });
    }
    /**
     * Returns diagnostic information of a feature. Not recommended for use.
     * @experimental
     * @param featureId The identifier of the feature to describe.
     * @returns {Promise<string>} A string containing a JSON document
     */
    getFeature(featureId: number): Promise<string> {
        return new Promise((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new GetFeatureRequest();
                request.setFeatureId(featureId);
                this.client.getFeature(request, this._metadata, (err, res: GetFeatureResponse) => {
                    if(err) {
                        let _err = newException(err);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    let result = res.getResult();
                    //console.log("RESPONSE:\n\r", result);
                    resolve(result);
                });
            });
        });
    }
    /**
     * Removes every record in the Senzing repository.
     * @returns {Promise<undefined>} for async flow control.
     */
    purgeRepository(): Promise<undefined> {
        return new Promise((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new PurgeRepositoryRequest();
                this.client.purgeRepository(request, this._metadata, (err, res: PurgeRepositoryResponse) => {
                    if(err) {
                        let _err = newException(err);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    resolve(undefined);
                });
            });
        });
    }
    /**
     * Used by {@link SzGrpcEnvironment}. Not intended to be called directly by end-users.
     * @ignore
     * @param configId 
     */
    reinitialize(configId: number): Promise<undefined | SzError> {
        return new Promise((resolve, reject) => {
            if(!this.client){
                reject(new SzNoGrpcConnectionError());
                return
            }
            this.waitForReady(this.getDeadlineFromNow(), (err) => {
                if(err) {
                    reject( err )
                    return;
                }
                const request = new ReinitializeRequest();
                request.setConfigId(configId);
                this.client.reinitialize(request, this._metadata, (err, res: ReinitializeResponse) => {
                    if(err) {
                        let _err = newException(err);
                        reject(_err);
                        throw _err;
                        return;
                    }
                    resolve(undefined);
                });
            });
        });
    }
}