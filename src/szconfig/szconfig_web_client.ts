/**
 * @fileoverview gRPC-Web generated client stub for szconfig
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.19.1
// source: szconfig.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as szconfig_pb from './szconfig_web_pb'; // proto import: "szconfig.proto"


export class SzConfigClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddDataSource = new grpcWeb.MethodDescriptor(
    '/szconfig.SzConfig/AddDataSource',
    grpcWeb.MethodType.UNARY,
    szconfig_pb.AddDataSourceRequest,
    szconfig_pb.AddDataSourceResponse,
    (request: szconfig_pb.AddDataSourceRequest) => {
      return request.serializeBinary();
    },
    szconfig_pb.AddDataSourceResponse.deserializeBinary
  );

  addDataSource(
    request: szconfig_pb.AddDataSourceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfig_pb.AddDataSourceResponse>;

  addDataSource(
    request: szconfig_pb.AddDataSourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfig_pb.AddDataSourceResponse) => void): grpcWeb.ClientReadableStream<szconfig_pb.AddDataSourceResponse>;

  addDataSource(
    request: szconfig_pb.AddDataSourceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfig_pb.AddDataSourceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfig.SzConfig/AddDataSource',
        request,
        metadata || {},
        this.methodDescriptorAddDataSource,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfig.SzConfig/AddDataSource',
    request,
    metadata || {},
    this.methodDescriptorAddDataSource);
  }

  methodDescriptorDeleteDataSource = new grpcWeb.MethodDescriptor(
    '/szconfig.SzConfig/DeleteDataSource',
    grpcWeb.MethodType.UNARY,
    szconfig_pb.DeleteDataSourceRequest,
    szconfig_pb.DeleteDataSourceResponse,
    (request: szconfig_pb.DeleteDataSourceRequest) => {
      return request.serializeBinary();
    },
    szconfig_pb.DeleteDataSourceResponse.deserializeBinary
  );

  deleteDataSource(
    request: szconfig_pb.DeleteDataSourceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfig_pb.DeleteDataSourceResponse>;

  deleteDataSource(
    request: szconfig_pb.DeleteDataSourceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfig_pb.DeleteDataSourceResponse) => void): grpcWeb.ClientReadableStream<szconfig_pb.DeleteDataSourceResponse>;

  deleteDataSource(
    request: szconfig_pb.DeleteDataSourceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfig_pb.DeleteDataSourceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfig.SzConfig/DeleteDataSource',
        request,
        metadata || {},
        this.methodDescriptorDeleteDataSource,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfig.SzConfig/DeleteDataSource',
    request,
    metadata || {},
    this.methodDescriptorDeleteDataSource);
  }

  methodDescriptorGetDataSources = new grpcWeb.MethodDescriptor(
    '/szconfig.SzConfig/GetDataSources',
    grpcWeb.MethodType.UNARY,
    szconfig_pb.GetDataSourcesRequest,
    szconfig_pb.GetDataSourcesResponse,
    (request: szconfig_pb.GetDataSourcesRequest) => {
      return request.serializeBinary();
    },
    szconfig_pb.GetDataSourcesResponse.deserializeBinary
  );

  getDataSources(
    request: szconfig_pb.GetDataSourcesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfig_pb.GetDataSourcesResponse>;

  getDataSources(
    request: szconfig_pb.GetDataSourcesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfig_pb.GetDataSourcesResponse) => void): grpcWeb.ClientReadableStream<szconfig_pb.GetDataSourcesResponse>;

  getDataSources(
    request: szconfig_pb.GetDataSourcesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfig_pb.GetDataSourcesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfig.SzConfig/GetDataSources',
        request,
        metadata || {},
        this.methodDescriptorGetDataSources,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfig.SzConfig/GetDataSources',
    request,
    metadata || {},
    this.methodDescriptorGetDataSources);
  }

  methodDescriptorVerifyConfig = new grpcWeb.MethodDescriptor(
    '/szconfig.SzConfig/VerifyConfig',
    grpcWeb.MethodType.UNARY,
    szconfig_pb.VerifyConfigRequest,
    szconfig_pb.VerifyConfigResponse,
    (request: szconfig_pb.VerifyConfigRequest) => {
      return request.serializeBinary();
    },
    szconfig_pb.VerifyConfigResponse.deserializeBinary
  );

  verifyConfig(
    request: szconfig_pb.VerifyConfigRequest,
    metadata?: grpcWeb.Metadata | null): Promise<szconfig_pb.VerifyConfigResponse>;

  verifyConfig(
    request: szconfig_pb.VerifyConfigRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: szconfig_pb.VerifyConfigResponse) => void): grpcWeb.ClientReadableStream<szconfig_pb.VerifyConfigResponse>;

  verifyConfig(
    request: szconfig_pb.VerifyConfigRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: szconfig_pb.VerifyConfigResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/szconfig.SzConfig/VerifyConfig',
        request,
        metadata || {},
        this.methodDescriptorVerifyConfig,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/szconfig.SzConfig/VerifyConfig',
    request,
    metadata || {},
    this.methodDescriptorVerifyConfig);
  }

}

